#+HUGO_BASE_DIR: ./

* Home
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: home
  :END:

** COMMENT About
   :PROPERTIES:
   :EXPORT_FILE_NAME: about
   :EXPORT_HUGO_TYPE: about
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_WEIGHT: 4
   :EXPORT_HUGO_WIDGET: about
   :EXPORT_HUGO_ACTIVE: t
   :END:

*** *このサイトについて*
 フリーソフトで学会発表用のスライドを作ったり，論文を書いたりするのに役に立ちそうなことを，自分のためにまとめておく備忘録みたいなもの．最近とみに衰えてきた記憶力の補助になればいいな．．．  :smile:

    Emacsのorg-modeやLaTeX絡みの話が多くなりそう．．．

    殆どは先人の方々からの受け売りなので，できるだけ情報元も併記する．

*** *環境*
    MacBook Pro late 2016, Sierra

    GNU Emacs 26.1, TeX Live 2018 (MacTeX-2018)

     -----

     # [[/files/petercheng_resume.pdf][Click here for a pdf version of my resume]]

     #  #+INCLUDE: "../../../resume/resume.org" :lines "35-"

* Posts
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: post
  :EXPORT_HUGO_WEIGHT: 1
  :END:
** COMMENT Emacsのインストール                                      :emacs:homebrew:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Emacs_Install
   :EXPORT_DATE: 2018-08-14
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Paris.jpg") (caption . "Paris"))
   :END:
   なにはともあれ，まずはEmacsのインストールから．様々な方法があるが，Mac userなので，ここでは[[https://brew.sh/index_ja][Homebrew]]を使ってサクッとインストール．Homebrew自体のインストールはそちらのサイトを参照．

   Emacsで日本語を書いてると，M-xしたときに面倒なことになるので，[[https://ja.wikipedia.org/wiki/インプット_メソッド_エディタ][Imput Method Editor (IME)]]用のパッチを当てる．既にパッチの当たっているYAMAMOTO Mitsuharu版のMac Port用のemacs-macがよい．railwaycatさんがHomebrewでインストールできるようにしてくれているので，これを使わせていただく（[[https://github.com/railwaycat/homebrew-emacsmacport][Emacs Mac Port]]）．ありがたい．

   #+begin_src shell
     $ brew tap railwaycat/emacsmacport
     $ brew install emacs-mac --with-modern-icon --with-imagemagick
     $ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications
   #+end_src

   - --with-modern-iconを指定すると、新しいアイコンになる。

  - なお，他のoptionは以下のように打てば分かる．
  #+begin_src sh
    $ brew tap railwaycat/emacsmacport
    $ brew info emacs-mac
  #+end_src

** COMMENT Emacsの設定（その1）Preludeの導入                         :emacs:prelude:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Prelude_install
   :EXPORT_DATE: 2018-08-15
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Istanbul-long.jpg") (caption . "Istanbul"))
   :END:
   昔はいろいろイチからinit.elを設定したものだけど，今は最初からほぼ全部やってくれる設定集がある．
*** Preludeとは
    - Emacs初期設定集の一種．他にもいろいろあるようだが，これしか使ったことがないので．．．
    - [[https://github.com/bbatsov/prelude][Prelude]] Githubはこちら
*** Preludeのインストール
    - 上記のGithubのFast Forwardに書いてあるように，macOSで既にgitとcurlとEmacsをインストールしていれば，下記のコマンドを打てば，Preludeがインストールされる．念のために，古い.emacs.dはどこかに退避させておく（名前を変えて保存されるようになって入るが心配性なもんで）．
      #+begin_src shell
      $ curl -L https://git.io/epre | sh
      #+end_src
    - インストール終了後にEmacsを再起動すると，勝手にもの凄い勢いでどんどん各種パッケージをダウンロードしてインストールしてくれる．auctexなどもインストールされるので，LaTeXも使えるようになる．素晴らしい！
    - prelude-modules.elを見て必要なmodulesがロードされるようにコメントアウトを外す．
      #+begin_src lisp
        (require 'prelude-helm) ;; Interface for narrowing and search
        (require 'prelude-helm-everywhere) ;; Enable Helm everywhere
      #+end_src
      helmにすっかり慣らされてしまったのでこのあたりは外している．
    - preludeのdefaultの設定は，ほぼ満足すべきものだが，ひとつだけ，prelude-auto-saveが邪魔である．これは，他のbufferに移動したり，他のアプリを使用したりするたびに自動で保存される機能であるが，非常に鬱陶しい．M-x customize からprelude-auto-saveを検索し，offにする．custom.elに書き込まれる．
    - 個人の設定は，~/.emacs.d/personal/init.elに書き込む．これは，org-modeを使って設定するのが良い．まずorg-modeについての記事を書いたあとにinit.orgについて書く予定．

** COMMENT Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する :emacs:init_org:init_el:
   :PROPERTIES:
   :EXPORT_FILE_NAME: init_org
   :EXPORT_DATE: 2018-08-17
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Honolulu-1.jpg") (caption . "Honolulu"))
   :END:
   自分のinit.elを見てると嫌になってくる．なんとかしようと弄り回すが，結局，訳わからんコードが山のように残ったまま．これをなんとかしようと，以前から気になっていたorg-modeでinit.elを管理するという方法を試してみた．まず，参考にしたサイトを最初にまとめておくので，そちらを見たほうが良いかもしれない．

*** 参考サイト
    - [[http://blog.lambda-consulting.jp/2015/11/20/article/][俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）]]
    - [[https://futurismo.biz/archives/6057/][babel-loader:org-mode で init.el を管理する方法]]
    - [[https://uwabami.junkhub.org/log/?date=20111213][平衡点(2011-12-13)]]
    - [[https://ameblo.jp/concello/entry-10786074455.html][ORG-Babel + init.el = ?? | くらいまーず　はい]]
    - [[https://funwithemacs.wordpress.com/2013/04/21/prelude-init-el-org-babel/][Prelude init.el & org-babel]]

*** Preludeを使いながら，init.orgから個人用のinit.elを自動作成させてEmacsを設定する方法
**** 基本方針
     - 個人用の設定内容は，~/.emacs.d/personal/init.orgに書き込む．
     - 起動時にEmacsはinit.orgを解釈できないので，init.elにはそれを解釈するように書き込む．
     - 具体的には，init.elで，(require 'org)した後にorg-babel-load-fileでinit.orgを読み込む．
     - しかし，Preludeを導入しているので，そのまま~/.emacs.dにinit.elを書き込むわけにはいかず，少し工夫する．
**** Preludeの導入
     前回のポスト（[[../prelude_install][Emacsの設定（その1）Preludeの導入]]）を参考　
**** emac-init.elの作成
     - ~/.emacs.d/personal/emacs-init.elというファイルを作成し，下記のように書き込む
     #+begin_src lisp
       (require 'org)
       (defvar my-config-dir (concat user-emacs-directory "personal/"))
       (org-babel-load-file
        (expand-file-name "init.org" my-config-dir))
     #+end_src
     - 工夫と言っても， *init.elの名前のままではinit.orgからinit.elが生成されるときに衝突してしまう*  ので，違う名前（emacs-init.el）にしていることと，init.orgを~/.emacs.d/personal/に置くようにしているだけ．
     - これでEmacsを起動すると，init.org内のcode blockだけを抜き出したinit.elが同じdirectory (personal)に作成される．
**** init.orgの作成
     - これでいよいよ肝心のinit.orgの作成を行う
     - org-modeについては，今更説明不要であろう．とにかくすごいやつ．超高機能アウトラインメジャーモード．文書作成，このブログ作成など殆どのことをこれでやっている．
     - 具体的な内容は次回以降に記述予定だが，code blockの挿入は特筆すべき者であり，先に書いておく．．
***** Code blockの挿入
      - [[http://blog.lambda-consulting.jp/2015/11/20/article/][俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）]]で指摘されているとおり，とにかく便利．以下はほとんどそのままコピペしたような記述である．
      - org-modeで以下のようにする．（後述する設定が必要）
        #+begin_example
          <l （ここで<TAB>すると．．．）
          以下のように展開される
          #+begin_src emacs-lisp

          #+end_src
        #+end_example
***** Codeの記述
      - 上記の#+begin_src emacs-lispと#+end_srcの間にemacs-lispで設定内容を書く．ここからが便利にできているところ．
      - code-blockの中にいるときに
        - C-c 'とする
        - 当該のcode blockだけのバッファが表示される（下図の下のバッファ）

          #+attr_html: :width 100% :target _self
         [[./static/img/CodeBlock_small.jpg]]

        - この中はemacs-lisp modeでsyntaxも普通に効くので，普通にコードを書く．もちろん，括弧の対応もハイライトで表示される．
        - C-c nとする
        - すると，インデントも綺麗に整えてくれる．
        - 満足したら，C-c 'で元のバッファに戻る．整形は綺麗なまま反映される．素晴らしい！
      - 具体的なinit.orgの内容は次回のポスト以降に記述予定
** COMMENT Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など :emacs:prelude:init_el:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Japanese_setup
   :EXPORT_DATE: 2018-08-18
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Colosseum.jpg") (caption . "Colosseum"))
   :END:
   ようやく，ここからinit.orgの具体的な記述になる．
*** Coding systemの設定
   - まずは，coding systemの設定，つまり，日本語の設定，日本語フォントの設定から
   - init.orgに以下のように書き込む
     #+begin_src lisp
       ,* Coding System Environment
       ,** 言語を日本語にする
          ,#+BEGIN_SRC lisp
          (set-language-environment 'Japanese)
          ,#+END_SRC
       ,** 極力UTF-8とする
          ,#+BEGIN_SRC lisp
            (prefer-coding-system 'utf-8)
          ,#+END_SRC
       ,** 日本語フォントをヒラギノにする
          - 日本語のサイズを指定しないと動的にサイズを変えられるようになる
          - 奥村先生のサイト参照 https://oku.edu.mie-u.ac.jp/~okumura/macosx/
          ,#+BEGIN_SRC lisp
            (when (or (eq window-system 'mac) (eq window-system 'ns))
              (set-face-attribute 'default nil
                                  :family "Menlo"
                                  :height 180) ;; 18pt
              (set-fontset-font nil 'japanese-jisx0208
                                (font-spec :family "Hiragino Kaku Gothic ProN"))
              (setq face-font-rescale-alist
                    '((".*Hiragino Kaku Gothic ProN.*" . 1.1))))
          ,#+END_SRC
     #+end_src
   - これがEmacs起動時にorg-babel-load-fileにより変換されて下記のようなinit.elとなる．
     #+begin_src lisp
       (set-language-environment 'Japanese)

       (prefer-coding-system 'utf-8)

       (when (or (eq window-system 'mac) (eq window-system 'ns))
         (set-face-attribute 'default nil
                             :family "Menlo"
                             :height 180) ;; 18pt
         (set-fontset-font nil 'japanese-jisx0208
                           (font-spec :family "Hiragino Kaku Gothic ProN"))
         (setq face-font-rescale-alist
               '((".*Hiragino Kaku Gothic ProN.*" . 1.1))))
     #+end_src
   - つまり，org-modeで書いたinit.orgでの解説はすべて除かれて，lispのみのcodeになってinit.elが生成される．
   - この利点は，init.elの説明が実に書きやすい点にある（実際にはinit.orgに書くわけだが．．．）．org-modeはアウトライナーなので，階層構造も自由自在である．整理もしやすいし，後で順番を変えるのもCommand + arrow keyを使えば実に簡単である．
*** Inline-patchの設定
    - ついで，最も重要なinline-patchの設定
    - 参考：[[http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945][Macに最新バージョンのEmacsをインストール]]
    - 参考：[[http://suzuki.tdiary.net/20160103.html][El Capitan での日本語入力時に Emacs 内のカーソル色を変更する]]
    - init.orgに以下のように書き込む．
      #+begin_src lisp
        ,* inline-patch on macosx
        ,** ミニバッファ入力時に自動的に英語入力モードにする
           - 参考：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
           ,#+BEGIN_SRC lisp
             (when (functionp 'mac-auto-ascii-mode)  ;; ミニバッファに入力時、自動的に英語モード
               (mac-auto-ascii-mode 1))
           ,#+END_SRC
        ,** 日本語か英語かで，カーソルの色を変える．
           - 参考１：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
           - 参考２：http://suzuki.tdiary.net/20160103.html
           ,#+BEGIN_SRC lisp
             (when (fboundp 'mac-input-source)
               (defun my-mac-selected-keyboard-input-source-chage-function ()
                 (let ((mac-input-source (mac-input-source)))
                   (set-cursor-color
                                                     ; (if (string-match "com.apple.inputmethod.Kotoeri.Roman" mac-input-source)
                    (if (string-match "com.google.inputmethod.Japanese.Roman" mac-input-source)
                        "#91C3FF" "#FF9300"))))
               (add-hook 'mac-selected-keyboard-input-source-change-hook
                         'my-mac-selected-keyboard-input-source-chage-function))
           ,#+END_SRC
      #+end_src
    - これがEmacsの起動時に，org-babel-load-fileによって，下記のようにcodeだけ抜き出されて，init.elに書き込まれる．
      #+begin_src lisp
        (when (functionp 'mac-auto-ascii-mode)  ;; ミニバッファに入力時、自動的に英語モード
          (mac-auto-ascii-mode 1))

        (when (fboundp 'mac-input-source)
          (defun my-mac-selected-keyboard-input-source-chage-function ()
            (let ((mac-input-source (mac-input-source)))
              (set-cursor-color
                                                ; (if (string-match "com.apple.inputmethod.Kotoeri.Roman" mac-input-source)
               (if (string-match "com.google.inputmethod.Japanese.Roman" mac-input-source)
                   "#91C3FF" "#FF9300"))))
          (add-hook 'mac-selected-keyboard-input-source-change-hook
                    'my-mac-selected-keyboard-input-source-chage-function))
      #+end_src
    - これで日本語入力中であっても，M-xなどでミニバッファ入力時に自動的に英語入力モードになってくれる．
    - ついでに行った日本語か英語かでカーソルの色が変わる設定はわりに有用だが，ときに色が変わらないことがあるが，気にしないことにしている．
** COMMENT LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする（2018年9月1日追記） :emacs:latex:pdf:skim:beamer:auctex:
   :PROPERTIES:
   :EXPORT_FILE_NAME: latexmk
   :EXPORT_DATE: 2018-08-19
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/琵琶湖.jpg") (caption . "琵琶湖"))
   :END:
*** TeX Live 2018のインストール
    - 参考サイト１：[[https://texwiki.texjp.org/?TeX%20Live][TeX Wiki TeX Live]]
    - 参考サイト２：[[https://texwiki.texjp.org/?TeX%20Live%2FMac][TeX Wiki TeX LiveMac]]
    - 参考サイト３：[[http://www.tug.org/mactex/][The MacTeX-2018 Distribution]]
    - 上記サイトを参考にTeX Live 2018もしくはMacTeX-2018をインストールする．
    - これでスライド作成ソフトであるbeamerも一緒にインストールされる．
    - beamerに固有の設定は特に必要なし．
*** TeX Live 2018のインストール（2018年9月1日追記）
    大事なことを２つ忘れていたので追記する．
**** ヒラギノフォントの埋め込みなど
     - 参考サイト：[[http://doratex.hatenablog.jp/entry/20180501/1525144736][MacTeX 2018のインストール&日本語環境構築法]]
     - こんなところを読んでいないで，直ちに上記のサイトに飛んでいただきたい．
     - マックユーザーにとっての最大の問題点は *「macos標準添付のヒラギノフォントなど商用フォントに関する設定ファイル群が，TeX LiveからTLContriに移動になった」* ということである．この問題に対する対応方法は，すべて上記のサイトに記載されているので，そのとおりにすれば良い．実にありがたい．
**** インストール後のパスの修正（symbolic linkを張る）
     - 参考サイト：[[https://texwiki.texjp.org/?TeX%20Live%2FMac][TeX Wiki TeX LiveMac]]
     - MacTeX 2018を普通にインストールすると，/usr/local/texlive/2018/bin/x86_64-darwin/bibtexというふうにbinの下にx86_64-darwinというdirectoryが入って，tex関連のコマンドのパスが上手く通らなくなる．そこで，上記の[[https://texwiki.texjp.org/?TeX%20Live%2FMac][TeX Wiki TeX LiveMac]]に書いてあるように，/usr/local/binディレクトリの下にsymbolic linkを張る．
       #+begin_src shell
       $ sudo /usr/local/texlive/????/bin/*/tlmgr path add
       #+end_src
     - 上記でうまくいかないときは下記のように具体的なディレクトリ名を指定する．
       #+begin_src shell
       $ sudo /usr/local/texlive/2018/bin/x86_64-darwin/tlmgr path add
       #+end_src

*** auctexのインストールと設定
    - latex文書を扱うなら，Emacsのパッケージであるauctexが最強（according to 独断と偏見）
    - preludeをインストールした時点で，auctexもインストールされる．
    - auctexの設定などについては以下を参照（手抜き..... (^^;;; ）
      + [[https://www.gnu.org/software/auctex/][AUCTEX – Sophisticated document creation]]
      + [[https://texwiki.texjp.org/?AUCTeX][TeX Wiki AUCTeX]]
      + [[https://mytexpert.osdn.jp/index.php?Emacs/AUCTeX][Emacs/AUCTeX]]
      + [[https://skalldan.wordpress.com/2011/07/20/auctex-の設定と便利な機能/][AUCTeX の設定と便利な機能]]
    - しかし，org-modeを使うようになってからは直接latex文書を打つことはめっきり少なくなってしまった．それでも，学会発表用のスライドなどはlatexを直接打って，beamer文書を作成し，pdf原稿に変換している．
***  latexmk
    - Emacsでbeamerを使って，スライド原稿などを作成していると，C-c C-cするたびにtex文書がcompileされてpdf原稿が出来上がるのを待たなければならず，この待ち時間が結構辛い．そこで，tex ファイルの変更が保存されるたびに自動で裏でlatexmkがcompileしてくれるようにする．latexmkを使う．
    - 参考サイト：[[https://texwiki.texjp.org/?Latexmk][TeX Wiki Latexmk]]
    - texlive2018, MacTeXに入っているので，これらを入れていれば別途インストールする必要なし．
    - ~/.latexmkrcの中に以下のように記述する（ちなみに私はxelatexを使用している）
      #+begin_src lisp
        $pdflatex = 'xelatex -interaction=nonstopmode -synctex=1 %O %S';
        $pdf_mode = 1;
        $postscript_mode = $dvi_mode = 0;
        $pdf_previewer  = 'open -a Skim';
        $preview_continuous_mode = 1;  # equivalent to -pvc
      #+end_src
*** 実際の作業
    - 上記のようにセットアップしていることとする．
    - ターミナルで，texファイルが有るdirectoryに移動し，
      #+BEGIN_SRC shell
      latexmk -pvc -pdf -view=none document.tex
      #+END_SRC
    - これで，texファイルへの変更を保存すると自動でコンパイルされて，設定にもよるが，skimで開いているpdfファイルも更新される．
*** XeLaTeXについて
    - 以下を参照されたい．特に最初にあげたZRさんの文書は必読！
      + [[http://zrbabbler.sp.land.to/xelatex.html][XeLaTeX で日本語する件について]]
      + [[https://texwiki.texjp.org/?XeTeX][TeXWiki XeTeX]]
      + [[http://suzusime-log.hatenablog.jp/entry/2017/04/15/210327][XeLaTeXだとかな混植が簡単にできて最高だという話]]
** COMMENT beamerでスライド原稿用pdfを作成する（その１） :latex:latexmk:beamer:texlive:mactex:emacs:
   :PROPERTIES:
   :EXPORT_FILE_NAME: beamer
   :EXPORT_DATE: 2018-08-24
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Kojidai.jpg") (caption . "Kojidai"))
   :END:
*** beamerによるスライド原稿の作成
    - 基本的には，通常のLaTeX文書と同じである．実際のスライド原稿を見てもらうほうが早いであろう．以下のtexファイルを作成し，beamer_test.texと名付け，保存する．Editorは何でも良いが，やはり，Emacsのauctexを使うと補完などあり，便利である．
    - 下記のファイルには多少コメントを付けた．フォントの指定は自明．themeは山のようにあるので，ググって好きなものを使う．
    - なお， \usefonttheme{professionalfonts} を入れているのは，これを入れないと，beamer は数式フォントとして sans に指定されたフォントを使うように内部で変更するからで，これを入れるとこの変更を無効にできる．数式がヒラギノになると間抜けである．昔，TeX QAで教えていただいた．参考：[[https://oku.edu.mie-u.ac.jp/tex/mod/forum/discuss.php?d=729][beamerでの数式フォントの変更]]
    - また，いろいろ余分なパッケージも読み込んでいるが，必要なときに書き込めば良く，不要なら削除する．
    #+begin_src tex
      % -*-coding:utf-8-*-
      \documentclass[svgnames, table, 14pt]{beamer}
      \usepackage{zxjatype}
      \usepackage[hiragino-dx]{zxjafont}

      % ヒラギノ角ゴ Proを使う
      \setjamainfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3}
      \setjasansfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3}

      % themeを指定する
      \usetheme{Darmstadt}

      \usefonttheme[onlylarge]{structurebold}
      \setbeamerfont*{frametitle}{size=\large,series=\bfseries}
      \setbeamertemplate{navigation symbols}{}

      \usepackage[english]{babel}
      \usepackage[latin1]{inputenc}
      \usepackage{times}
      \usepackage[T1]{fontenc}
      \usepackage{hyperref}

      % Setup TikZ
      \usepackage{tikz}
      \usetikzlibrary{arrows}
      \tikzstyle{block}=[draw opacity=0.7,line width=1.4cm]
      % Figure position
      \usepackage[absolute,overlay]{textpos}
      % math
      \usepackage{mathabx}

      \usefonttheme{professionalfonts}

      % Author, Title, etc.
      \title[hoge/fugaによる相補的な治療における高難度症例の治療と成績]
      {hoge/fugaによる相補的な治療における高難度症例の治療と成績}
      \author[taipapa]
      {taipapa, 織田信長, 豊臣秀吉, 徳川家康}
      \institute[hogefuga University]
      {hogefuga大学大学院 hogefuga研究科　hogefuga分野}


      \date[日本hogefuga外科学会 第??回学術総会　\hspace{2.4cm} 201X年X月XX日]
      {\scriptsize{Symposium-02「とっーても難しいhogeとfuga」
      \\ \vspace{0.15cm} 筆頭演者はhogefuga外科学会へ過去3年間のCOI自己申告を
      完了しています．\\本演題の発表に関して開示すべきCOIはありません
      }}

      % 学会名，日付，スライド番号を挿入
      \setbeamertemplate{footline}
      {\color{gray} %
      \hspace{.075cm}
      \insertshortdate%
      \hspace{4cm}
      \insertframenumber{} / \inserttotalframenumber%
      }

      \begin{document}

      \begin{frame}
      \titlepage
      \end{frame}

      \section{Introduction}

      \begin{frame}{背景と目的}
      \begin{block}{}
      \begin{itemize}
      \item hogeとfugaを比較してみると，一方で難易度の高い症例で
      も他方では容易に行える場合も多い.
      \item 当施設では，一方に片寄ることなく，hogeとfugaを相補的に
      用いることにより合併症の減少を目指す方針をとっている．
      \item そこで，自験例から高難度のhogefuga症例についての
      方針と成績を主にhogefuga surgeonの立場から検討した.
      \end{itemize}
      \end{block}
      \end{frame}

      \section{Results}
      \begin{frame}
      \frametitle{hogefuga症例の画像}
      \centering
      \includegraphics[width=3.5in]{hoge_fuga.pdf}
      \end{frame}
      \end{document}
    #+end_src
    - ターミナルで，cdして上記のbeamer_test.texのあるdirectoryに移動し，shellで以下のように打ち込む．前回のポスト（[[../latexmk][LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする]]を参考　
      #+begin_src shell
        latexmk -pvc -pdf -view=none beamer_test.tex
      #+end_src
    - これで下記のようなpdfが出来上がるはず．

          #+attr_html: :width 100% :target _self
         [[./static/img/beamer_test.jpg]]

          #+attr_html: :width 100% :target _self
         [[./static/img/beamer_test2.jpg]]

    - 画像の貼り付けが必要なら，上の文書にもあるように必要な箇所で，
      #+begin_src shell
        \includegraphics[width=2in]{/Data/hoge/fuga/......./hoge_fuga.pdf}
      #+end_src
      などと打てばよい．以下のようなスライドが得られる．

          #+attr_html: :width 100% :target _self
         [[./static/img/beamer_test3.jpg]]

    - なにもしなければ，画像は左寄せになる．中央に寄せたければ，上記の文書内にあるように，\centering を使用する．

    - 次回は，beamerで動画を走らせる件について書く予定．

** COMMENT beamerでスライド原稿用pdfを作成する（その2）動画が走るスライド原稿を作る :beamer:movie:latex:pdf:
   :PROPERTIES:
   :EXPORT_FILE_NAME: beamer_movie
   :EXPORT_DATE: 2018-08-25
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Kojidai2.jpg") (caption . "Kojidai"))
   :END:
   実は，同じような内容について2010年に，[[https://oku.edu.mie-u.ac.jp/tex/mod/forum/discuss.php?d=399#p2100][TeX QA]] に投稿しているが，その後現在に至るまで使い続けることができており，一応，こちらでもまとめておくことにした．

*** beamerで動画が走るスライド原稿を作る
    - 前述した ，[[https://oku.edu.mie-u.ac.jp/tex/mod/forum/discuss.php?d=399#p2100][TeX QA]] に経緯は投稿してあるので，詳細はそちらを読んでいただきたい．
    - 参考にしたのは，Adobeのpdfのマニュアル（DVI specials for PDF generation） https://www.tug.org/TUGboat/tb30-1/tb94cho.pdf の以下の部分
      #+begin_example
      3 Annotations

      An annotation is considered as an object with a location on a page. The type of the object is given by the value of the key `/Subtype', for instance, `/Text', `/Link', `/Sound', `/Movie', etc. (See [1, p. 615] for the list of all annotation types.) The location is given by an array object associated to the key `/Rect'. DVIPDFM(x) provides the following special command for annotations............

       The following example shows a movie annotation that enables us to run the movie file ‘mymovie.avi’ inside a PDF viewer program.

       \special{pdf:ann bbox 0 0 360 180 <<
       /Subtype /Movie /Border [1 0 0]
       /T (My Movie) /Movie <<
       /F (mymovie.avi) /Aspect [720 360]
       /Poster true >>
       /A << /ShowControls false >> >>}
      #+end_example
    - アスペクト比やコントロールバーの有無，リピートするかどうかなども指示できる（下記参照）
    - mymovie.aviのところに動かしたい動画を記入（パスも効く）
    - 私の作成したものは読んでいただければおわかりのように，非常にダサいベタ書きである．
    - 最近の書き方は以下の通りで，もっぱら，mov形式の画像を使用している．コンテナがaviやwmvだと動かないが，Mac以外でどうなるのかは不明．そういえば，Windowsで試したことはなかった.....
      #+begin_src tex
        {
            \usebackgroundtemplate{\put(20, -265){\includegraphics[scale=0.45]{/Data/.../..../Figures/hogefuga.pdf}}}
            \begin{frame}
            \frametitle{hogefugaの対策}
            \special{pdf:ann bbox -10 -130 320 90 <<
                     /Subtype /Movie /Border [0 0 1]
                     /T (My Movie) /Movie <<
                     /F (/Data/.../hogefuga.mov)
                     %/Aspect [720 480]
                     /Aspect [640 480]
                     /Poster false >>
                     /A << /ShowControls true /Mode /Repeat >> >>}
            \end{frame}
        }
      #+end_src
    - \usebackgroundtemplateの部分には動画のキャプチャー画像を貼り付けておく．なにもないと，動画が動き出す前の画面が空白になってしまう（もっと良い方法があれば，どなたかご教示ください）．
    - \putで背景画像（キャプチャー画像）の位置を直接指定し，\includegraphicsのscaleで倍率を指定して動画の大きさに合わせている．
    - これで，画像をクリックすると（ほぼ）同じ大きさの動画が（ほぼ）同じ位置で動くようになる
    - 動画の大きさはbboxで，かぶせる静止画の大きさはscaleで調整する．
    - プレゼンテーションにskimを使うと動画が動かないので注意．
    - 動画は同一directoryにある必要はなく，パスで指定すれば良い
    - 動画自体はpdfの中に埋め込まれないので，pdfの容量がむやみに大きくならないという利点がある．
    - Adobe Acrobat Readerでプレゼンすれば，動画は動くし，音もでる．コントロールバーにより早送りなども可能．
    - 最初にpdfで動画をクリックすると「セキュリティ上の問題．．．」というメッセージが表示される．この横にあるオプションボタンをクリックして，信頼するを選択すれば，動画が動くようになる．
** COMMENT beamerでスライド原稿用pdfを作成する（その3）動画が走るスライド原稿を作る（media9に関する追記） :beamer:movie:latex:pdf:
   :PROPERTIES:
   :EXPORT_FILE_NAME: beamer_movie2
   :EXPORT_DATE: 2018-08-26
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Florence-1.jpg") (caption . "Florence"))
   :END:
   前回のポストを書いた後に，念のために調べてみると，どうやら，media9なるものが，いまやpdfに動画を埋め込むために普通に使われているようだということが判明してしまった！う〜む，勉強不足を痛感する．遅れを取り返すべく，早速やってみたので，それを追加報告とする．
*** media9
    media9はtexlive2018に含まれており，特に別途インストールする必要はなかった．media9については様々な情報があったが，多くはWindowsやLinuxに関してであり，そのままコピペして動くような極楽情報はなかなか見つからなかった．やはり，餅は餅屋で，OS X TeXにそのものズバリの情報があった．それが参考サイト５である．
    - 参考サイト１：[[https://texwiki.texjp.org/?media9][TeXWiki media9]]
    - 参考サイト２：[[https://blog.tokor.org/2016/06/04/TeXでプレゼン-LaTeX-Beamerを使う人のためのTips集/][TeXでプレゼン - LaTeX Beamerを使う人のためのTips集]]
    - 参考サイト３：[[https://www.youtube.com/watch?v=HHzcrP27I08][How to embed video files in a PDF using LaTeX (a media9/beamer example)]]
    - 参考サイト４：[[http://empitsu.hatenablog.com/entry/2012/11/02/182722][Beamer で PDF ファイルに動画を埋め込む]]
    - 参考サイト５：[[http://tug.org/pipermail/macostex-archives/2014-July/052673.html][media9 problems]]
*** beamerで動画が走るスライド原稿を作る（media9版）
    - 同一directoryにhogefuga.movがあるとすれば，以下のように書けば良い
    - preambleに，\usepackage{media9}を忘れずに追加しておく．
      #+begin_src tex
        \newcommand{\showmovie}[1]{\includemedia[
          activate=pageopen,
          deactivate=pageclose,
          width=110mm, height=72mm,
          addresource=#1,
          flashvars={
            src=#1
            &loop=true
            &autoPlay=false
          }
          ]{}{StrobeMediaPlayback.swf}
        }

        \begin{frame}
          \frametitle{hogefugaの動画}
          \centering
          \showmovie{hogefuga.mov}
        \end{frame}
      #+end_src
    - 110mmと72mmの数値はフレーム内の動画の収まり具合により適宜調整する．
    - loopは，ループ再生するかどうか
    - autoplayは自動再生するかどうか
*** media9を使用したときの利点
    - なんと言ってもべた書きよりもelegant!
    - スライドを開けたときに，何もしなくても動画の静止画が映るので，前回のやり方のように背景をべた書きしなくて良い．
*** media9を使用したときの欠点
    もう完全にmedia9に乗り換えるつもりでいたが，以下に述べるようにいくつか欠点もあることが判明した．
    - media9はpdf自体に動画を埋め込むようである．したがって，200MBの動画を走らせるとすると，pdf自体が200MB以上の大きさになってしまう．
    - それだけでなく，200MB程度の動画になると，途中で固まってしまう！これでは使い物にならない．
    - 一方，前回記事のべた書き方式だと，pdf自体に動画を埋め込まないので，pdfは大きくならないし，動画指定のパスは効くし，200MBだろうともっと大きかろうと動画はガンガン動く．
*** 結論
    - 容量の小さな動画であれば，media9でも十分であろう．
    - 私のように，容量の大きな動画を使用するような場合は，べた書きを使用するほうが良いであろう．
    - ということで，結局，元の木阿弥に戻ることとなった．
** Emacsのorg-modeで論文を書く（その1：pdfとhtmlへの出力） :org:mode:emacs:latex:html:word:pandoc:
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-mode_paper_1
   :EXPORT_DATE: 2018-09-01
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Paris-2.jpg") (caption . "Pyramide du Louvre"))
   :END:
   私がEmacsを使用している理由の一番大きなものはorg-modeである．あらゆる文書作成にorg-modeを用いている．org-modeを使って論文を書くことに関しては，ググってもらえばおわかりのように，ネット上に山のように情報が存在する．「屋上屋を架してどうする」と言う自分の中の声を押し殺し，あくまで備忘録ということで，あえてここにまとめておく．なお，私はGTDのツールとしてはorg-modeを全く使用していないので，その種の情報はここにはまったくないことをお断りしておく．
*** 目的
    1. org-modeからlatex経由で，文献がnumberingされ文献リストも付いたpdfを出力できるようにする
    2. org-modeから，文献がnumberingされ文献リストも付いたhtmlを出力できるようにする
    3. org-modeから，文献がnumberingされ文献リストも付いたwordファイルを出力できるようにする
*** org-modeで論文を書く利点
    - LaTeXのややこしいコマンドを覚えなくても普通に文章を書いていけば，pdfで出力できる．
    - latexの力を借りることで，文献の引用やリストの作成を自動化できる．
    - 必要なら，htmlとしても出力できる．
    - どうしても必要なら，pandocの力を借りて，なんとMicrosoft Wordのファイルとしても出力できてしまう．
*** org-modeの設定・セットアップ（pdfとhtmlへの出力用）
    設定が最もよくまとまっているのは[[https://texwiki.texjp.org/?Emacs%2FOrg%20mode][TeX Wiki Emacs/Org mode]] 設定例のmacOSの部分である．正統派の方は，こちらを参考にしていただきたい．

    私は，[[https://ctan.org/pkg/koma-script][koma-script – A bundle of versatile classes and packages]] と [[https://tufte-latex.github.io/tufte-latex/][Tufte-LaTeX]] を気に入っており，ほぼこれらしか使わないので，その設定を書いておく．その前に少し情報をまとめておく．
**** [[https://ctan.org/pkg/koma-script][koma-script – A bundle of versatile classes and packages]]
     - 参考サイト１：[[http://konoyonohana.blog.fc2.com/blog-category-12.html][Koma-Script 入門　～初歩の初歩～]]
     - 参考サイト２：[[https://ichiro-maruta.blogspot.com/2013/03/latex.html][使ってはいけない LaTeX のコマンド・パッケージ・作法]]
     - 参考サイト３：[[https://qiita.com/zr_tex8r/items/297154ca924749e62471][LaTeX の「アレなデフォルト」 傾向と対策]]
     - アメリカ生まれのaritcleなどの欧文標準文書クラスはデフォルトがレターサイズで余白が広すぎてしまう．これに対して，ヨーロッパ生まれのkoma-scriptはa4がデフォルトで，余白も広すぎず，レイアウトもなんとなくオシャレ（笑）である．当然のことながら，texliveに含まれており，texliveをインストールした時点で，インストールされている．
**** [[https://tufte-latex.github.io/tufte-latex/][Tufte-LaTeX]]
     - 参考サイト１： [[https://github.com/tsdye/tufte-org-mode/blob/master/README.md][tufte-org-mode]]
     - [[https://www.edwardtufte.com/tufte/index][Edward R. Tufte]]によって作られたページレイアウト．典型的には文章が左側に配置され，右側には広いマージンがありノート，文献，表，図などが配置されるスタイルである．こういうスタイルはよく見かけるものだと思うが，作者がはっきりしているとは，恥ずかしながら全く知らなかった．
     -  [[https://github.com/tsdye/tufte-org-mode/blob/master/README.md][tufte-org-mode]]はこのtufte classをorg-modeから使えるようにした有り難いパッケージである．
**** org-bullet
     - 参考サイト１：https://github.com/sabof/org-bullets
     - 参考サイト２：http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html
     - pdf出力とは関係ないが，ついでに触れておく．要するにorg-modeの見た目が良くなるパッケージである．星印が色付きの丸や二重丸になる．やる気に繋がるので，見た目は大事である．こんな感じになる．

         #+attr_html: :width 100% :target _self
         [[./static/img/org-bullet.jpg]]

     - init.elには以下のように[[https://github.com/jwiegley/use-package][use-package]]を用いて記述してインストール兼設定となる．もちろん，これも以前の記事（[[../init_org][Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する]]）で説明したように，init.orgに書いたものから生成されたinit.elである．

         #+begin_src lisp
           (use-package org-bullets
             :ensure t
             :config
             (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
         #+end_src
**** org-modeのinit.elの設定（pdf出力用）
     - 前述のごとく，koma-scriptとTufte-LaTeXについて設定する．

     - 何回もしつこいようだが，これも以前の記事（[[../init_org][Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する]]）で説明したように，init.orgに書いたものから生成されたinit.elである．

       #+begin_src lisp
         (require 'ox-latex)
         (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
         (setq org-latex-default-class "bxjsarticle")

         (add-to-list 'org-latex-classes
                      '("koma-article"
                        "\\documentclass{scrartcl}"
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")
                        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                        ("\\paragraph{%s}" . "\\paragraph*{%s}")
                        ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

         (add-to-list 'org-latex-classes
                      '("koma-jarticle"
                        "\\documentclass{scrartcl}
                        \\usepackage{amsmath}
                        \\usepackage{amssymb}
                        \\usepackage{xunicode}
                        \\usepackage{fixltx2e}
                        \\usepackage{zxjatype}
                        \\usepackage[hiragino-dx]{zxjafont}
                        \\usepackage{xltxtra}
                        \\usepackage{graphicx}
                        \\usepackage{longtable}
                        \\usepackage{float}
                        \\usepackage{wrapfig}
                        \\usepackage{soul}
                        \\usepackage{hyperref}"
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")
                        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                        ("\\paragraph{%s}" . "\\paragraph*{%s}")
                        ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

         ;; tufte-handout class for writing classy handouts and papers
         (add-to-list 'org-latex-classes
                      '("tufte-handout"
                        "\\documentclass[twoside,nobib]{tufte-handout}
                                          [NO-DEFAULT-PACKAGES]
                         \\usepackage{zxjatype}
                         \\usepackage[hiragino-dx]{zxjafont}"
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")))
         ;; tufte-book class
         (add-to-list 'org-latex-classes
                      '("tufte-book"
                        "\\documentclass[twoside,nobib]{tufte-book}
                                         [NO-DEFAULT-PACKAGES]
                          \\usepackage{zxjatype}
                          \\usepackage[hiragino-dx]{zxjafont}"
                        ("\\part{%s}" . "\\part*{%s}")
                        ("\\chapter{%s}" . "\\chapter*{%s}")
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")
                        ("\\paragraph{%s}" . "\\paragraph*{%s}")))
       #+end_src

     - 私はxelatexを使っているので，compileは以下のように設定している．

       #+begin_src lisp
         (setq org-latex-pdf-process
               '("xelatex -interaction nonstopmode -output-directory %o %f"
                 "bibtex %b"
                 "xelatex -interaction nontopmode -output-directory %o %f"
                 "xelatex -interaction nonstopmode -output-directory %o %f"))
       #+end_src

     - ここまでEmacsを設定した上で，orgで原稿を書き，C-c C-eと打てば，以下のような画面になる．なお，pandocやTufteの項は別途記事にするので，とりあえずは無視してほしい．

         #+attr_html: :width 100% :target _self
         [[./static/img/org-C-c-C-e.jpg]]

     - pdfで出力したければ，さらに，l o と打つと，As PDF file and openを選択したことになり，原稿がpdfとして出力され，かつ，skimでそのpdfがオープンされる．

     - 同じく，htmlで出力したければ，h o と打つと，As HTML file and openを選択したことになり，ブラウザーでそのhtmlがオープンされる．
*** 「org-modeで論文を書く」の実例
    - それでは実例を示してみる．以下のような書類を作成し，hogefuga.orgとして保存する．hoge_fuga.jpgはorg fileと同じdirectoryにあるものとする．
    - 前半の＃で始まる行が続く部分はorg-modeの設定であり，latexのこのパッケージを使うぞ，とか，org-modeのヘッダーをどの深さまで表示するかなどを決めている．詳細はググればすぐに分かるので略.....(^^;;;
    #+begin_src lisp
      ,#+LaTeX_CLASS: koma-jarticle
      ,#+LaTeX_CLASS_OPTIONS: [12pt]
      ,#+LATEX_HEADER: \usepackage{geometry}
      ,#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
      ,#+LaTeX_HEADER: \usepackage[sort,compress,super,comma]{natbib}
      ,#+STARTUP:  overview
      ,#+STARTUP:  hidestars
      ,#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
      ,#+OPTIONS: date:nil
      ,#+LINK_UP:
      ,#+LINK_HOME:

      ,#+TITLE: hoge/fugaによる相補的な治療における高難度症例の治療と成績
      ,#+AUTHOR: taipapa, 織田信長, 豊臣秀吉, 徳川家康
      \vspace*{-1.5cm}

      \hspace{2.5cm} hogefuga大学大学院 hogefuga研究科 hogefuga分野

      ,* 背景と目的
      hogeとfugaを比較してみると，一方で難易度の高い症例でも他方では容易に行える場合も多い．当施設では，一方に片寄ることなく，hogeとfugaを相補的に用いることにより合併症の減少を目指す方針をとっている．そこで，自験例から高難度のhogefuga症例についての方針と成績を主にhogefuga surgeonの立場から検討した．
      ,* 結果
      hogefuga症例の画像である (*Fig. [[hoge_fuga]]*)．

      ,#+NAME: hoge_fuga
      ,#+caption: hoge-fuga（重症例である）
      ,#+attr_latex: :float t :width 3in  :align center
      ,#+ATTR_HTML: :width 500  :float: wrap :align center
      [[./hoge_fuga.jpg]]

      ,* 結論
      hogefugaによる治療は有効である．
    #+end_src
    - ついで，前述のごとく，Emacsでこの文書を開いた状態で，C-c C-e l oと打てば，以下のようなpdfがskimで開かれる．

        #+attr_html: :width 100% :target _self
         [[./static/img/hogefuga_text.jpg]]

    - また，C-c C-e h oと打てば，以下のようなhtmlがbrowserで開かれる．latexのコマンドが見えてしまっているのがご愛嬌だが，htmlにしか出力しないのであれば，削除すればよい．

        #+attr_html: :width 100% :target _self
         [[./static/img/hogefuga_html.jpg]]

    - 長くなったので，ここまでとし，文献の引用の設定は次回の記事にまとめることとする．
