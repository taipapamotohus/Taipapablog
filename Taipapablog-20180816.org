#+HUGO_BASE_DIR: ./

* Home
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: home
  :END:

** DONE About
   CLOSED: [2018-08-23 Thu 22:14]
   :PROPERTIES:
   :EXPORT_FILE_NAME: about
   :EXPORT_HUGO_TYPE: about
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_WEIGHT: 4
   :EXPORT_HUGO_WIDGET: about
   :EXPORT_HUGO_ACTIVE: t
   :END:

*** *このサイトについて*
 フリーソフトで学会発表用のスライドを作ったり，論文を書いたりするのに役に立ちそうなことを，自分のためにまとめておく備忘録みたいなもの．最近とみに衰えてきた記憶力の補助になればいいな．．．  :smile:

    Emacsのorg-modeやLaTeX絡みの話が多くなりそう．．．

    殆どは先人の方々からの受け売りなので，できるだけ情報元も併記する．

*** *環境*
    MacBook Pro late 2016, Sierra

    GNU Emacs 26.1, TeX Live 2018 (MacTeX-2018)

     -----

     # [[/files/petercheng_resume.pdf][Click here for a pdf version of my resume]]

     #  #+INCLUDE: "../../../resume/resume.org" :lines "35-"

* Posts
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: post
  :EXPORT_HUGO_WEIGHT: 1
  :END:
** Emacsのインストール                                      :emacs:homebrew:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Emacs_Install
   :EXPORT_DATE: 2018-08-14
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Paris.jpg") (caption . "Paris"))
   :END:
   なにはともあれ，まずはEmacsのインストールから．様々な方法があるが，Mac userなので，ここでは[[https://brew.sh/index_ja][Homebrew]]を使ってサクッとインストール．Homebrew自体のインストールはそちらのサイトを参照．

   Emacsで日本語を書いてると，M-xしたときに面倒なことになるので，[[https://ja.wikipedia.org/wiki/インプット_メソッド_エディタ][Imput Method Editor (IME)]]用のパッチを当てる．既にパッチの当たっているYAMAMOTO Mitsuharu版のMac Port用のemacs-macがよい．railwaycatさんがHomebrewでインストールできるようにしてくれているので，これを使わせていただく（[[https://github.com/railwaycat/homebrew-emacsmacport][Emacs Mac Port]]）．ありがたい．

   #+begin_src shell
     $ brew tap railwaycat/emacsmacport
     $ brew install emacs-mac --with-modern-icon --with-imagemagick
     $ ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications
   #+end_src

   - --with-modern-iconを指定すると、新しいアイコンになる。

  - なお，他のoptionは以下のように打てば分かる．
  #+begin_src sh
    $ brew tap railwaycat/emacsmacport
    $ brew info emacs-mac
  #+end_src

** Emacsの設定（その1）Preludeの導入                         :emacs:prelude:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Prelude_install
   :EXPORT_DATE: 2018-08-15
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Istanbul-long.jpg") (caption . "Istanbul"))
   :END:
   昔はいろいろイチからinit.elを設定したものだけど，今は最初からほぼ全部やってくれる設定集がある．
*** Preludeとは
    - Emacs初期設定集の一種．他にもいろいろあるようだが，これしか使ったことがないので．．．
    - [[https://github.com/bbatsov/prelude][Prelude]] Githubはこちら
*** Preludeのインストール
    - 上記のGithubのFast Forwardに書いてあるように，macOSで既にgitとcurlとEmacsをインストールしていれば，下記のコマンドを打てば，Preludeがインストールされる．念のために，古い.emacs.dはどこかに退避させておく（名前を変えて保存されるようになって入るが心配性なもんで）．
      #+begin_src shell
      $ curl -L https://git.io/epre | sh
      #+end_src
    - インストール終了後にEmacsを再起動すると，勝手にもの凄い勢いでどんどん各種パッケージをダウンロードしてインストールしてくれる．auctexなどもインストールされるので，LaTeXも使えるようになる．素晴らしい！
    - prelude-modules.elを見て必要なmodulesがロードされるようにコメントアウトを外す．
      #+begin_src lisp
        (require 'prelude-helm) ;; Interface for narrowing and search
        (require 'prelude-helm-everywhere) ;; Enable Helm everywhere
      #+end_src
      helmにすっかり慣らされてしまったのでこのあたりは外している．
    - preludeのdefaultの設定は，ほぼ満足すべきものだが，ひとつだけ，prelude-auto-saveが邪魔である．これは，他のbufferに移動したり，他のアプリを使用したりするたびに自動で保存される機能であるが，非常に鬱陶しい．M-x customize からprelude-auto-saveを検索し，offにする．custom.elに書き込まれる．
    - 個人の設定は，~/.emacs.d/personal/init.elに書き込む．これは，org-modeを使って設定するのが良い．まずorg-modeについての記事を書いたあとにinit.orgについて書く予定．

** Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する :emacs:init_org:init_el:
   :PROPERTIES:
   :EXPORT_FILE_NAME: init_org
   :EXPORT_DATE: 2018-08-17
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Honolulu-1.jpg") (caption . "Honolulu"))
   :END:
   自分のinit.elを見てると嫌になってくる．なんとかしようと弄り回すが，結局，訳わからんコードが山のように残ったまま．これをなんとかしようと，以前から気になっていたorg-modeでinit.elを管理するという方法を試してみた．まず，参考にしたサイトを最初にまとめておくので，そちらを見たほうが良いかもしれない．

*** 参考サイト
    - [[http://blog.lambda-consulting.jp/2015/11/20/article/][俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）]]
    - [[https://futurismo.biz/archives/6057/][babel-loader:org-mode で init.el を管理する方法]]
    - [[https://uwabami.junkhub.org/log/?date=20111213][平衡点(2011-12-13)]]
    - [[https://ameblo.jp/concello/entry-10786074455.html][ORG-Babel + init.el = ?? | くらいまーず　はい]]
    - [[https://funwithemacs.wordpress.com/2013/04/21/prelude-init-el-org-babel/][Prelude init.el & org-babel]]

*** Preludeを使いながら，init.orgから個人用のinit.elを自動作成させてEmacsを設定する方法
**** 基本方針
     - 個人用の設定内容は，~/.emacs.d/personal/init.orgに書き込む．
     - 起動時にEmacsはinit.orgを解釈できないので，init.elにはそれを解釈するように書き込む．
     - 具体的には，init.elで，(require 'org)した後にorg-babel-load-fileでinit.orgを読み込む．
     - しかし，Preludeを導入しているので，そのまま~/.emacs.dにinit.elを書き込むわけにはいかず，少し工夫する．
**** Preludeの導入
     前回のポスト（[[../prelude_install][Emacsの設定（その1）Preludeの導入]]）を参考　
**** emac-init.elの作成
     - ~/.emacs.d/personal/emacs-init.elというファイルを作成し，下記のように書き込む
     #+begin_src lisp
       (require 'org)
       (defvar my-config-dir (concat user-emacs-directory "personal/"))
       (org-babel-load-file
        (expand-file-name "init.org" my-config-dir))
     #+end_src
     - 工夫と言っても， *init.elの名前のままではinit.orgからinit.elが生成されるときに衝突してしまう*  ので，違う名前（emacs-init.el）にしていることと，init.orgを~/.emacs.d/personal/に置くようにしているだけ．
     - これでEmacsを起動すると，init.org内のcode blockだけを抜き出したinit.elが同じdirectory (personal)に作成される．
**** init.orgの作成
     - これでいよいよ肝心のinit.orgの作成を行う
     - org-modeについては，今更説明不要であろう．とにかくすごいやつ．超高機能アウトラインメジャーモード．文書作成，このブログ作成など殆どのことをこれでやっている．
     - 具体的な内容は次回以降に記述予定だが，code blockの挿入は特筆すべき者であり，先に書いておく．．
***** Code blockの挿入
      - [[http://blog.lambda-consulting.jp/2015/11/20/article/][俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）]]で指摘されているとおり，とにかく便利．以下はほとんどそのままコピペしたような記述である．
      - org-modeで以下のようにする．（後述する設定が必要）
        #+begin_example
          <l （ここで<TAB>すると．．．）
          以下のように展開される
          #+begin_src emacs-lisp

          #+end_src
        #+end_example
***** Codeの記述
      - 上記の#+begin_src emacs-lispと#+end_srcの間にemacs-lispで設定内容を書く．ここからが便利にできているところ．
      - code-blockの中にいるときに
        - C-c ;とする
        - 当該のcode blockだけのバッファが表示される（下図の下のバッファ）

          #+attr_html: :width 100% :target _self
         [[./static/img/CodeBlock_small.jpg]]

        - この中はemacs-lisp modeでsyntaxも普通に効くので，普通にコードを書く．もちろん，括弧の対応もハイライトで表示される．
        - C-c nとする
        - すると，インデントも綺麗に整えてくれる．
        - 満足したら，C-c ;で元のバッファに戻る．整形は綺麗なまま反映される．素晴らしい！
      - 具体的なinit.orgの内容は次回のポスト以降に記述予定
** Emacsの設定（その3）ようやくinit.orgの記述: 日本語の設定，inline-patchの設定など :emacs:prelude:init_el:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Japanese_setup
   :EXPORT_DATE: 2018-08-18
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Colosseum.jpg") (caption . "Colosseum"))
   :END:
   ようやく，ここからinit.orgの具体的な記述になる．
*** Coding systemの設定
   - まずは，coding systemの設定，つまり，日本語の設定，日本語フォントの設定から
   - init.orgに以下のように書き込む
     #+begin_src lisp
       ,* Coding System Environment
       ,** 言語を日本語にする
          ,#+BEGIN_SRC lisp
          (set-language-environment 'Japanese)
          ,#+END_SRC
       ,** 極力UTF-8とする
          ,#+BEGIN_SRC lisp
            (prefer-coding-system 'utf-8)
          ,#+END_SRC
       ,** 日本語フォントをヒラギノにする
          - 日本語のサイズを指定しないと動的にサイズを変えられるようになる
          - 奥村先生のサイト参照 https://oku.edu.mie-u.ac.jp/~okumura/macosx/
          ,#+BEGIN_SRC lisp
            (when (or (eq window-system 'mac) (eq window-system 'ns))
              (set-face-attribute 'default nil
                                  :family "Menlo"
                                  :height 180) ;; 18pt
              (set-fontset-font nil 'japanese-jisx0208
                                (font-spec :family "Hiragino Kaku Gothic ProN"))
              (setq face-font-rescale-alist
                    '((".*Hiragino Kaku Gothic ProN.*" . 1.1))))
          ,#+END_SRC
     #+end_src
   - これがEmacs起動時にorg-babel-load-fileにより変換されて下記のようなinit.elとなる．
     #+begin_src lisp
       (set-language-environment 'Japanese)

       (prefer-coding-system 'utf-8)

       (when (or (eq window-system 'mac) (eq window-system 'ns))
         (set-face-attribute 'default nil
                             :family "Menlo"
                             :height 180) ;; 18pt
         (set-fontset-font nil 'japanese-jisx0208
                           (font-spec :family "Hiragino Kaku Gothic ProN"))
         (setq face-font-rescale-alist
               '((".*Hiragino Kaku Gothic ProN.*" . 1.1))))
     #+end_src
   - つまり，org-modeで書いたinit.orgでの解説はすべて除かれて，lispのみのcodeになってinit.elが生成される．
   - この利点は，init.elの説明が実に書きやすい点にある（実際にはinit.orgに書くわけだが．．．）．org-modeはアウトライナーなので，階層構造も自由自在である．整理もしやすいし，後で順番を変えるのもCommand + arrow keyを使えば実に簡単である．
*** Inline-patchの設定
    - ついで，最も重要なinline-patchの設定
    - 参考：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
    - 参考：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
    - 参考：http://suzuki.tdiary.net/20160103.html
    - init.orgに以下のように書き込む．
      #+begin_src lisp
        ,* inline-patch on macosx
        ,** ミニバッファ入力時に自動的に英語入力モードにする
           - 参考：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
           ,#+BEGIN_SRC lisp
             (when (functionp 'mac-auto-ascii-mode)  ;; ミニバッファに入力時、自動的に英語モード
               (mac-auto-ascii-mode 1))
           ,#+END_SRC
        ,** 日本語か英語かで，カーソルの色を変える．
           - 参考１：http://keisanbutsuriya.hateblo.jp/entry/2016/04/10/115945
           - 参考２：http://suzuki.tdiary.net/20160103.html
           ,#+BEGIN_SRC lisp
             (when (fboundp 'mac-input-source)
               (defun my-mac-selected-keyboard-input-source-chage-function ()
                 (let ((mac-input-source (mac-input-source)))
                   (set-cursor-color
                                                     ; (if (string-match "com.apple.inputmethod.Kotoeri.Roman" mac-input-source)
                    (if (string-match "com.google.inputmethod.Japanese.Roman" mac-input-source)
                        "#91C3FF" "#FF9300"))))
               (add-hook 'mac-selected-keyboard-input-source-change-hook
                         'my-mac-selected-keyboard-input-source-chage-function))
           ,#+END_SRC
      #+end_src
    - これがEmacsの起動時に，org-babel-load-fileによって，下記のようにcodeだけ抜き出されて，init.elに書き込まれる．
      #+begin_src lisp
        (when (functionp 'mac-auto-ascii-mode)  ;; ミニバッファに入力時、自動的に英語モード
          (mac-auto-ascii-mode 1))

        (when (fboundp 'mac-input-source)
          (defun my-mac-selected-keyboard-input-source-chage-function ()
            (let ((mac-input-source (mac-input-source)))
              (set-cursor-color
                                                ; (if (string-match "com.apple.inputmethod.Kotoeri.Roman" mac-input-source)
               (if (string-match "com.google.inputmethod.Japanese.Roman" mac-input-source)
                   "#91C3FF" "#FF9300"))))
          (add-hook 'mac-selected-keyboard-input-source-change-hook
                    'my-mac-selected-keyboard-input-source-chage-function))
      #+end_src
    - これで日本語入力中であっても，M-xなどでミニバッファ入力時に自動的に英語入力モードになってくれる．
    - ついでに行った日本語か英語かでカーソルの色が変わる設定はわりに有用だが，ときに色が変わらないことあり．
** LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする  :emacs:latex:pdf:skim:beamer:auctex:
   :PROPERTIES:
   :EXPORT_FILE_NAME: latexmk
   :EXPORT_DATE: 2018-08-19
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/琵琶湖.jpg") (caption . "琵琶湖"))
   :END:
*** TeX Live 2018のインストール
    - 参考サイト１：[[https://texwiki.texjp.org/?TeX%20Live][TeX Wiki TeX Live]]
    - 参考サイト２：[[https://texwiki.texjp.org/?TeX%20Live%2FMac][TeX Wiki TeX LiveMac]]
    - 参考サイト３：[[http://www.tug.org/mactex/][The MacTeX-2018 Distribution]]
    - 上記サイトを参考にTeX Live 2018もしくはMacTeX-2018をインストールする．
    - これでスライド作成ソフトであるbeamerも一緒にインストールされる．
    - beamerに固有の設定は特に必要なし．
*** auctexのインストールと設定
    - latex文書を扱うなら，Emacsのパッケージであるauctexが最強（according to 独断と偏見）
    - preludeをインストールした時点で，auctexもインストールされる．
    - auctexの設定などについては以下を参照（手抜き..... (^^;;; ）
      + [[https://www.gnu.org/software/auctex/][AUCTEX – Sophisticated document creation]]
      + [[https://texwiki.texjp.org/?AUCTeX][TeX Wiki AUCTeX]]
      + [[https://mytexpert.osdn.jp/index.php?Emacs/AUCTeX][Emacs/AUCTeX]]
      + [[https://skalldan.wordpress.com/2011/07/20/auctex-の設定と便利な機能/][AUCTeX の設定と便利な機能]]
    - しかし，org-modeを使うようになってからは直接latex文書を打つことはめっきり少なくなってしまった．それでも，学会発表用のスライドなどはlatexを直接打って，beamer文書を作成し，pdf原稿に変換している．
***  latexmk
    - Emacsでbeamerを使って，スライド原稿などを作成していると，C-c C-cするたびにtex文書がcompileされてpdf原稿が出来上がるのを待たなければならず，この待ち時間が結構辛い．そこで，tex ファイルの変更が保存されるたびに自動で裏でlatexmkがcompileしてくれるようにする．latexmkを使う．
    - 参考サイト：[[https://texwiki.texjp.org/?Latexmk][TeX Wiki Latexmk]]
    - texlive2018, MacTeXに入っているので，これらを入れていれば別途インストールする必要なし．
    - ~/.latexmkrcの中に以下のように記述する（ちなみに私はxelatexを使用している）
      #+begin_src lisp
        $pdflatex = 'xelatex -interaction=nonstopmode -synctex=1 %O %S';
        $pdf_mode = 1;
        $postscript_mode = $dvi_mode = 0;
        $pdf_previewer  = 'open -a Skim';
        $preview_continuous_mode = 1;  # equivalent to -pvc
      #+end_src
*** 実際の作業
    - 上記のようにセットアップしていることとする．
    - ターミナルで，texファイルが有るdirectoryに移動し，
      #+BEGIN_SRC shell
      latexmk -pvc -pdf -view=none document.tex
      #+END_SRC
    - これで，texファイルへの変更を保存すると自動でコンパイルされて，設定にもよるが，skimで開いているpdfファイルも更新される．
** beamerでスライド原稿用pdfを作成する :latex:latexmk:beamer:texlive:mactex:emacs:
   :PROPERTIES:
   :EXPORT_FILE_NAME: beamer
   :EXPORT_DATE: 2018-08-24
   :EXPORT_HUGO_AUTO_SET_LASTMOD: t
   :EXPORT_HUGO_DRAFT: false
   :EXPORT_AUTHOR: "taipapa"
   :EXPORT_HUGO_TYPE: post
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :header '((image . "headers/Kojidai.jpg") (caption . "Kojidai"))
   :END:
*** beamerによるスライド原稿の作成
    - 基本的には，通常のLaTeX文書と同じである．実際のスライド原稿を見てもらうほうが早いであろう．以下のtexファイルを作成し，beamer_test.texと名付け，保存する．Editorは何でも良いが，やはり，Emacsが便利である．
    - 下記のファイルには多少コメントを付けた．フォントの指定は自明．themeは山のようにあるので，ググって好きなものを使う．
    - なお， \usefonttheme{professionalfonts} を入れているのは，これを入れないと，beamer は数式フォントとして sans に指定されたフォントを使うように内部で変更するからで，これを入れるとこの変更を無効にできる．数式がヒラギノになると間抜けである．昔，TeX QAで教えてもらった．参考：[[https://oku.edu.mie-u.ac.jp/tex/mod/forum/discuss.php?d=729][beamerでの数式フォントの変更]]
    - また，いろいろ余分なパッケージも読み込んでいるが，必要なときに書き込めば良く，不要なら削除する．
    #+begin_src lisp
      % -*-coding:utf-8-*-
      \documentclass[svgnames, table, 14pt]{beamer}
      \usepackage{zxjatype}
      \usepackage[hiragino-dx]{zxjafont}

      % ヒラギノ角ゴ Proを使う
      \setjamainfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3}
      \setjasansfont[Scale=0.95,BoldFont=ヒラギノ角ゴ Pro W6]{ヒラギノ角ゴ Pro W3}

      % themeを指定する
      \usetheme{Darmstadt}

      \usefonttheme[onlylarge]{structurebold}
      \setbeamerfont*{frametitle}{size=\large,series=\bfseries}
      \setbeamertemplate{navigation symbols}{}

      \usepackage[english]{babel}
      \usepackage[latin1]{inputenc}
      \usepackage{times}
      \usepackage[T1]{fontenc}
      \usepackage{hyperref}

      % Setup TikZ
      \usepackage{tikz}
      \usetikzlibrary{arrows}
      \tikzstyle{block}=[draw opacity=0.7,line width=1.4cm]
      % Figure position
      \usepackage[absolute,overlay]{textpos}
      % math
      \usepackage{mathabx}

      \usefonttheme{professionalfonts}

      % Author, Title, etc.
      \title[hoge/fugaによる相補的な治療における高難度症例の治療と成績]
      {hoge/fugaによる相補的な治療における高難度症例の治療と成績}
      \author[taipapa]
      {taipapa, 織田信長, 豊臣秀吉, 徳川家康}
      \institute[hogefuga University]
      {hogefuga大学大学院 hogefuga研究科　hogefuga分野}


      \date[日本hogefuga外科学会 第??回学術総会　\hspace{2.4cm} 201X年X月XX日]
      {\scriptsize{Symposium-02「とっーても難しいhogeとfuga」
      \\ \vspace{0.15cm} 筆頭演者はhogefuga外科学会へ過去3年間のCOI自己申告を
      完了しています．\\本演題の発表に関して開示すべきCOIはありません
      }}

      % 学会名，日付，スライド番号を挿入
      \setbeamertemplate{footline}
      {\color{gray} %
      \hspace{.075cm}
      \insertshortdate%
      \hspace{4cm}
      \insertframenumber{} / \inserttotalframenumber%
      }

      \begin{document}

      \begin{frame}
      \titlepage
      \end{frame}

      \section{Introduction}

      \begin{frame}{背景と目的}
      \begin{block}{}
      \begin{itemize}
      \item hogeとfugaを比較してみると，一方で難易度の高い症例で
      も他方では容易に行える場合も多い.
      \item 当施設では，一方に片寄ることなく，hogeとfugaを相補的に
      用いることにより合併症の減少を目指す方針をとっている．
      \item そこで，自験例から高難度のhogefuga症例についての
      方針と成績を主にhogefuga surgeonの立場から検討した.
      \end{itemize}
      \end{block}
      \end{frame}
      \end{document}
    #+end_src
    - ターミナルで，cdして上記のbeamer_test.texのあるdirectoryに移動し，shellで以下のように打ち込む．前回のポスト（[[../latexmk][LaTeXをインストールし，texファイルが変更されると，自動的にcompileしてskimでのpdfも自動で更新されるようにする]]を参考　
      #+begin_src shell
        latexmk -pvc -pdf -view=none beamer_test.tex
      #+end_src
    - これで下記のようなpdfが出来上がるはず．

          #+attr_html: :width 100% :target _self
         [[./static/img/beamer_tex.jpg]]

          #+attr_html: :width 100% :target _self
         [[./static/img/beamer_tex2.jpg]]
    - 画像の貼り付けが必要なら，必要な箇所で，
      #+begin_src shell
        \includegraphics[width=2in]{/Data/hoge/fuga/......./hoge_fuga.pdf}
      #+end_src
      と打てばよい．
** COMMENT beamerで動画が走るスライド原稿を作る
